{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1008.15138",
      "templateHash": "8317400981892419913"
    }
  },
  "parameters": {
    "subscriptionId": {
      "type": "string",
      "metadata": {
        "description": "Required. Subscription GUID."
      }
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Required. ResourceGroup Name."
      }
    },
    "resourceGroupLocation": {
      "type": "string",
      "defaultValue": "usgovvirginia",
      "metadata": {
        "description": "Required. ResourceGroup location."
      }
    },
    "useExistingVnetandSubnet": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Required. Use existing virtual network and subnet."
      }
    },
    "vNetResourceGroupName": {
      "type": "string",
      "defaultValue": "existing-vNet",
      "metadata": {
        "description": "Required. Resource Group name of virtual network if using existing vnet and subnet."
      }
    },
    "vNetAddressPrefixes": {
      "type": "array",
      "defaultValue": [
        "172.17.0.0/16"
      ],
      "metadata": {
        "description": "Required. An Array of 1 or more IP Address Prefixes for the Virtual Network."
      }
    },
    "subnetAddressPrefix": {
      "type": "string",
      "defaultValue": "172.17.0.0/24",
      "metadata": {
        "description": "Required. The subnet Name of ASEv3."
      }
    },
    "secretName": {
      "type": "string",
      "defaultValue": "Secret001",
      "metadata": {
        "description": "Required. Secret Name in KeyVault"
      }
    },
    "secretValue": {
      "type": "secureString",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Required. Secret Value in KeyVault"
      }
    },
    "networkSecurityGroupSecurityRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Required. Array of Security Rules to deploy to the Network Security Group."
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "metadata": {
        "description": "Required. Storage Account SKU."
      }
    },
    "deploymentNameSuffix": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "Required. Creating UTC for deployments."
      }
    },
    "existingRemoteVirtualNetworkName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Required. Exisisting vNet Name for Peering."
      }
    },
    "existingRemoteVirtualNetworkResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Required. Exisisting vNet Resource Group for Peering."
      }
    },
    "usePeering": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Required. Setup Peering."
      }
    },
    "objectId": {
      "type": "string",
      "defaultValue": "00000000-0000-0000-0000-000000000000"
    },
    "sqlAdministratorLogin": {
      "type": "string",
      "metadata": {
        "description": "Required. SQL Admin Username"
      }
    },
    "sqlAdministratorPassword": {
      "type": "secureString",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Required. SQL Password "
      }
    },
    "sqlLocation": {
      "type": "string",
      "metadata": {
        "description": "Required. SQL Location"
      }
    }
  },
  "functions": [],
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('subscriptionId')]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('resourceGroupName')]"
          },
          "location": {
            "value": "[parameters('resourceGroupLocation')]"
          },
          "tags": {
            "value": {}
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "16793551366393102966"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2019-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').location]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('subscriptionId')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environment": {
            "value": "test"
          },
          "function": {
            "value": "app"
          },
          "index": {
            "value": 1
          },
          "appName": {
            "value": "aad"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "12331030264596359980"
            }
          },
          "parameters": {
            "appName": {
              "type": "string",
              "maxLength": 8
            },
            "function": {
              "type": "string"
            },
            "environment": {
              "type": "string",
              "allowedValues": [
                "development",
                "test",
                "staging",
                "production"
              ]
            },
            "index": {
              "type": "int"
            }
          },
          "functions": [],
          "variables": {
            "functionShort": "[if(greater(length(parameters('function')), 5), substring(parameters('function'), 0, 5), parameters('function'))]",
            "appNameShort": "[if(greater(length(parameters('appName')), 5), substring(parameters('appName'), 0, 5), parameters('appName'))]",
            "environmentLetter": "[substring(parameters('environment'), 0, 1)]",
            "resourceNamePlaceHolder": "[format('{0}-{1}-{2}-[PH]-{3}', parameters('appName'), variables('environmentLetter'), parameters('function'), padLeft(parameters('index'), 2, '0'))]",
            "resourceNameShortPlaceHolder": "[format('{0}-{1}-{2}-[PH]-{3}', parameters('appName'), variables('environmentLetter'), variables('functionShort'), padLeft(parameters('index'), 2, '0'))]",
            "dbNamePlaceHolder": "[format('{0}{1}{2}db{3}', parameters('appName'), variables('environmentLetter'), variables('functionShort'), padLeft(parameters('index'), 2, '0'))]",
            "storageAccountNamePlaceHolder": "[format('{0}{1}{2}sta{3}', parameters('appName'), variables('environmentLetter'), variables('functionShort'), padLeft(parameters('index'), 2, '0'))]",
            "vmNamePlaceHolder": "[format('{0}-{1}-{2}-{3}', variables('appNameShort'), variables('environmentLetter'), variables('functionShort'), padLeft(parameters('index'), 2, '0'))]",
            "networkSecurityGroupNamePlaceHolder": "[format('{0}{1}{2}-nsg{3}', parameters('appName'), variables('environmentLetter'), variables('functionShort'), padLeft(parameters('index'), 2, '0'))]"
          },
          "resources": [],
          "outputs": {
            "resourceName": {
              "type": "string",
              "value": "[variables('resourceNamePlaceHolder')]"
            },
            "resourceNameShort": {
              "type": "string",
              "value": "[variables('resourceNameShortPlaceHolder')]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[variables('storageAccountNamePlaceHolder')]"
            },
            "dbName": {
              "type": "string",
              "value": "[variables('dbNamePlaceHolder')]"
            },
            "networkSecurityGroupName": {
              "type": "string",
              "value": "[variables('networkSecurityGroupNamePlaceHolder')]"
            },
            "vmName": {
              "type": "string",
              "value": "[variables('vmNamePlaceHolder')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[format('keyvault-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('subscriptionId')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.resourceName.value, '[PH]', 'kv')]"
          },
          "secretName": {
            "value": "[parameters('secretName')]"
          },
          "secretValue": {
            "value": "[parameters('secretValue')]"
          },
          "objectId": {
            "value": "[parameters('objectId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "9483075037702199064"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the key vault."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Specifies the Azure location where the key vault should be created."
              }
            },
            "enabledForDeployment": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
              }
            },
            "enabledForDiskEncryption": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
              }
            },
            "enabledForTemplateDeployment": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
              }
            },
            "tenantId": {
              "type": "string",
              "defaultValue": "[subscription().tenantId]",
              "metadata": {
                "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
              }
            },
            "objectId": {
              "type": "string",
              "metadata": {
                "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
              }
            },
            "keysPermissions": {
              "type": "array",
              "defaultValue": [
                "list"
              ],
              "metadata": {
                "description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
              }
            },
            "secretsPermissions": {
              "type": "array",
              "defaultValue": [
                "list"
              ],
              "metadata": {
                "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "standard",
              "allowedValues": [
                "standard",
                "premium"
              ],
              "metadata": {
                "description": "Specifies whether the key vault is a standard vault or a premium vault."
              }
            },
            "secretName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the secret that you want to create."
              }
            },
            "secretValue": {
              "type": "secureString",
              "metadata": {
                "description": "Specifies the value of the secret that you want to create."
              }
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-04-01-preview",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "properties": {
                "enabledForDeployment": "[parameters('enabledForDeployment')]",
                "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
                "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                "tenantId": "[parameters('tenantId')]",
                "accessPolicies": [
                  {
                    "objectId": "[parameters('objectId')]",
                    "tenantId": "[parameters('tenantId')]",
                    "permissions": {
                      "keys": "[parameters('keysPermissions')]",
                      "secrets": "[parameters('secretsPermissions')]"
                    }
                  }
                ],
                "sku": {
                  "name": "[parameters('skuName')]",
                  "family": "A"
                },
                "networkAcls": {
                  "defaultAction": "Allow",
                  "bypass": "AzureServices"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-04-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretName'))]",
              "properties": {
                "value": "[parameters('secretValue')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[not(parameters('useExistingVnetandSubnet'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[format('nsg-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('subscriptionId')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "nsgName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.resourceName.value, '[PH]', 'nsg')]"
          },
          "networkSecurityGroupSecurityRules": {
            "value": "[parameters('networkSecurityGroupSecurityRules')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "16570503467483676660"
            }
          },
          "parameters": {
            "networkSecurityGroupSecurityRules": {
              "type": "array",
              "metadata": {
                "description": "Required. Array of Security Rules to deploy to the Network Security Group."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "location"
              }
            },
            "nsgName": {
              "type": "string",
              "metadata": {
                "description": "nsgName"
              }
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-11-01",
              "name": "[parameters('nsgName')]",
              "location": "[parameters('location')]",
              "properties": {
                "copy": [
                  {
                    "name": "securityRules",
                    "count": "[length(parameters('networkSecurityGroupSecurityRules'))]",
                    "input": {
                      "name": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].name]",
                      "properties": {
                        "description": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.description]",
                        "access": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.access]",
                        "destinationAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, ''), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix)]",
                        "destinationAddressPrefixes": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes), 0), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes)]",
                        "destinationPortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges), 0), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges)]",
                        "destinationPortRange": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange, ''), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange)]",
                        "direction": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.direction]",
                        "priority": "[int(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.priority)]",
                        "protocol": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.protocol]",
                        "sourceAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, ''), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix)]",
                        "sourcePortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges), 0), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges)]",
                        "sourcePortRange": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRange]"
                      }
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[not(parameters('useExistingVnetandSubnet'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[format('vnet-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('subscriptionId')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualNetworkName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.resourceName.value, '[PH]', 'vnet')]"
          },
          "vNetAddressPrefixes": {
            "value": "[parameters('vNetAddressPrefixes')]"
          },
          "subnets": {
            "value": [
              {
                "name": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.resourceName.value, '[PH]', 'snet')]",
                "addressPrefix": "[parameters('subnetAddressPrefix')]",
                "delegations": [
                  {
                    "name": "Microsoft.Web.hostingEnvironments",
                    "properties": {
                      "serviceName": "Microsoft.Web/hostingEnvironments"
                    }
                  }
                ],
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled",
                "networkSecurityGroupName": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.resourceName.value, '[PH]', 'nsg')]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "7931235615355876788"
            }
          },
          "parameters": {
            "vNetAddressPrefixes": {
              "type": "array",
              "metadata": {
                "description": "Required. Array of vNet address to deploy."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Required. Array of vNet address to deploy."
              }
            },
            "virtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "Required. vNet Name."
              }
            },
            "subnets": {
              "type": "array",
              "metadata": {
                "description": "Required. Array of subnets to deploy."
              }
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2020-11-01",
              "name": "[parameters('virtualNetworkName')]",
              "location": "[parameters('location')]",
              "properties": {
                "copy": [
                  {
                    "name": "subnets",
                    "count": "[length(parameters('subnets'))]",
                    "input": {
                      "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                      "properties": {
                        "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                        "networkSecurityGroup": "[if(empty(parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName), json('null'), json(format('{{\"id\": \"{0}\"}}', resourceId('Microsoft.Network/networkSecurityGroups', parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName))))]",
                        "delegations": "[parameters('subnets')[copyIndex('subnets')].delegations]"
                      }
                    }
                  }
                ],
                "addressSpace": {
                  "addressPrefixes": "[parameters('vNetAddressPrefixes')]"
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('virtualNetworkName')]"
            },
            "vNetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            },
            "subnets": {
              "type": "array",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))).subnets]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('nsg-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('useExistingVnetandSubnet')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[format('subnet-delegation-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('subscriptionId')]",
      "resourceGroup": "[parameters('vNetResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualNetworkName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.resourceName.value, '[PH]', 'vnet')]"
          },
          "subnetName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.resourceName.value, '[PH]', 'snet')]"
          },
          "subnetAddressPrefix": {
            "value": "[parameters('subnetAddressPrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "16378313352452892831"
            }
          },
          "parameters": {
            "virtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "Required. The Virtual Network (vNet) Name."
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Required. The subnet Name of ASEv3."
              }
            },
            "subnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "Required. The subnet Name of ASEv3."
              }
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('subnetName'))]",
              "properties": {
                "addressPrefix": "[parameters('subnetAddressPrefix')]",
                "delegations": [
                  {
                    "name": "Microsoft.Web.hostingEnvironments",
                    "properties": {
                      "serviceName": "Microsoft.Web/hostingEnvironments"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('nsg-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('vnet-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[format('ase-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('subscriptionId')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aseName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.resourceName.value, '[PH]', 'ase')]"
          },
          "aseVnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('vnet-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.vNetId.value]"
          },
          "aseSubnetName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.resourceName.value, '[PH]', 'snet')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "10840816241336039244"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "aseLbMode": {
              "type": "int",
              "defaultValue": 3
            },
            "aseName": {
              "type": "string"
            },
            "aseSubnetName": {
              "type": "string"
            },
            "aseVnetId": {
              "type": "string"
            }
          },
          "functions": [],
          "variables": {
            "subnetId": "[format('{0}/Subnets/{1}', parameters('aseVnetId'), parameters('aseSubnetName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/hostingEnvironments",
              "apiVersion": "2021-01-01",
              "name": "[parameters('aseName')]",
              "location": "[parameters('location')]",
              "kind": "ASEV3",
              "properties": {
                "internalLoadBalancingMode": "[parameters('aseLbMode')]",
                "virtualNetwork": {
                  "id": "[variables('subnetId')]"
                }
              }
            }
          ],
          "outputs": {
            "dnssuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/hostingEnvironments', parameters('aseName'))).dnsSuffix]"
            },
            "hostingid": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/hostingEnvironments', parameters('aseName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('nsg-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('vnet-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[format('app-serviceplan-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('subscriptionId')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appServicePlanName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.resourceName.value, '[PH]', 'app-sp')]"
          },
          "hostingEnvironmentId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('ase-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.hostingid.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "10743406710949993168"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "appServicePlanName": {
              "type": "string"
            },
            "appServicePlanKind": {
              "type": "string",
              "defaultValue": "windows"
            },
            "appServicePlanSku": {
              "type": "object",
              "defaultValue": {
                "Name": "I1v2",
                "tier": "IsolatedV2"
              }
            },
            "appServicePlanWorkerCount": {
              "type": "int",
              "defaultValue": 3
            },
            "appServicePlanWorkerSize": {
              "type": "int",
              "defaultValue": 6
            },
            "hostingEnvironmentId": {
              "type": "string"
            }
          },
          "functions": [],
          "variables": {
            "hostingEnvironmentProfile": {
              "id": "[parameters('hostingEnvironmentId')]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2019-08-01",
              "name": "[parameters('appServicePlanName')]",
              "kind": "[parameters('appServicePlanKind')]",
              "location": "[parameters('location')]",
              "properties": {
                "hostingEnvironmentProfile": "[variables('hostingEnvironmentProfile')]",
                "perSiteScaling": false,
                "reserved": false,
                "targetWorkerCount": "[parameters('appServicePlanWorkerCount')]",
                "targetWorkerSizeId": "[parameters('appServicePlanWorkerSize')]"
              },
              "sku": "[parameters('appServicePlanSku')]"
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('ase-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('nsg-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[format('private-dns-zone-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('subscriptionId')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "privateDNSZoneName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('ase-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.dnssuffix.value]"
          },
          "virtualNetworkId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('vnet-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.vNetId.value]"
          },
          "aseName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.resourceName.value, '[PH]', 'ase')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "15574887235050019129"
            }
          },
          "parameters": {
            "aseName": {
              "type": "string",
              "metadata": {
                "description": "Required. ASE name."
              }
            },
            "privateDNSZoneName": {
              "type": "string",
              "metadata": {
                "description": "Required. Private DNS zone name."
              }
            },
            "virtualNetworkId": {
              "type": "string",
              "metadata": {
                "description": "Required. Network Id."
              }
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('privateDNSZoneName')]",
              "location": "global",
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('privateDNSZoneName'), 'vnetLink')]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[parameters('virtualNetworkId')]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDNSZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/A",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('privateDNSZoneName'), '*')]",
              "properties": {
                "ttl": 3600,
                "aRecords": [
                  {
                    "ipv4Address": "[reference(resourceId('Microsoft.Web/hostingEnvironments/configurations', split(format('{0}/networking', parameters('aseName')), '/')[0], split(format('{0}/networking', parameters('aseName')), '/')[1]), '2021-01-15').internalInboundIpAddresses[0]]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDNSZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/A",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('privateDNSZoneName'), '*.scm')]",
              "properties": {
                "ttl": 3600,
                "aRecords": [
                  {
                    "ipv4Address": "[reference(resourceId('Microsoft.Web/hostingEnvironments/configurations', split(format('{0}/networking', parameters('aseName')), '/')[0], split(format('{0}/networking', parameters('aseName')), '/')[1]), '2021-01-15').internalInboundIpAddresses[0]]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDNSZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/A",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('privateDNSZoneName'), '@')]",
              "properties": {
                "ttl": 3600,
                "aRecords": [
                  {
                    "ipv4Address": "[reference(resourceId('Microsoft.Web/hostingEnvironments/configurations', split(format('{0}/networking', parameters('aseName')), '/')[0], split(format('{0}/networking', parameters('aseName')), '/')[1]), '2021-01-15').internalInboundIpAddresses[0]]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDNSZoneName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('ase-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('vnet-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[format('web-app-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('subscriptionId')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "managedIdentityName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.resourceName.value, '[PH]', 'mi')]"
          },
          "sqlAdministratorLogin": {
            "value": "[parameters('sqlAdministratorLogin')]"
          },
          "sqlAdministratorPassword": {
            "value": "[parameters('sqlAdministratorPassword')]"
          },
          "aseName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.resourceName.value, '[PH]', 'ase')]"
          },
          "hostingPlanName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.resourceName.value, '[PH]', 'app-sp')]"
          },
          "sqllocation": {
            "value": "[parameters('sqlLocation')]"
          },
          "databaseName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.dbName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "15921773688837890385"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Specifies region for all resources"
              }
            },
            "sqllocation": {
              "type": "string",
              "defaultValue": "usdodeast",
              "metadata": {
                "description": "Specifies region for sql resources -- using usdodeast in test"
              }
            },
            "sqlAdministratorLogin": {
              "type": "string",
              "metadata": {
                "description": "Specifies sql admin login"
              }
            },
            "sqlAdministratorPassword": {
              "type": "secureString",
              "metadata": {
                "description": "Specifies sql admin password"
              }
            },
            "managedIdentityName": {
              "type": "string",
              "metadata": {
                "description": "Specifies managed identity name"
              }
            },
            "aseName": {
              "type": "string"
            },
            "hostingPlanName": {
              "type": "string"
            },
            "hostingPlanID": {
              "type": "string",
              "defaultValue": "[resourceId('Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]",
              "metadata": {
                "description": "Specifies hid"
              }
            },
            "hostingEnvironmentProfile": {
              "type": "string",
              "defaultValue": "[resourceId('Microsoft.Web/hostingEnvironments/', parameters('aseName'))]"
            },
            "httpsEnable": {
              "type": "bool",
              "defaultValue": true
            },
            "databaseName": {
              "type": "string"
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2020-08-01-preview",
              "name": "[format('{0}/{1}', format('sqlsrv-{0}', parameters('databaseName')), parameters('databaseName'))]",
              "location": "[parameters('sqllocation')]",
              "sku": {
                "name": "Basic"
              },
              "properties": {
                "collation": "SQL_Latin1_General_CP1_CI_AS",
                "maxSizeBytes": 1073741824
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', format('sqlsrv-{0}', parameters('databaseName')))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2020-11-01-preview",
              "name": "[format('{0}/{1}', format('sqlsrv-{0}', parameters('databaseName')), 'AllowAllWindowsAzureIps')]",
              "properties": {
                "endIpAddress": "0.0.0.0",
                "startIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', format('sqlsrv-{0}', parameters('databaseName')))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}', format('web-{0}', parameters('hostingPlanName')), 'connectionstrings')]",
              "properties": {
                "DefaultConnection": {
                  "value": "[format('Data Source=tcp:{0},1433;Initial Catalog={1};User Id={2}@{3};Password={4};', reference(resourceId('Microsoft.Sql/servers', format('sqlsrv-{0}', parameters('databaseName')))).fullyQualifiedDomainName, parameters('databaseName'), reference(resourceId('Microsoft.Sql/servers', format('sqlsrv-{0}', parameters('databaseName')))).administratorLogin, reference(resourceId('Microsoft.Sql/servers', format('sqlsrv-{0}', parameters('databaseName')))).fullyQualifiedDomainName, parameters('sqlAdministratorPassword'))]",
                  "type": "SQLAzure"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', format('sqlsrv-{0}', parameters('databaseName')), parameters('databaseName'))]",
                "[resourceId('Microsoft.Sql/servers', format('sqlsrv-{0}', parameters('databaseName')))]",
                "[resourceId('Microsoft.Web/sites', format('web-{0}', parameters('hostingPlanName')))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2020-11-01-preview",
              "name": "[format('sqlsrv-{0}', parameters('databaseName'))]",
              "location": "[parameters('sqllocation')]",
              "properties": {
                "administratorLogin": "[parameters('sqlAdministratorLogin')]",
                "administratorLoginPassword": "[parameters('sqlAdministratorPassword')]",
                "version": "12.0"
              }
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-12-01",
              "name": "[format('web-{0}', parameters('hostingPlanName'))]",
              "location": "[parameters('location')]",
              "tags": {
                "[format('hidden-related:{0}', parameters('hostingPlanID'))]": "empty",
                "displayName": "Website"
              },
              "properties": {
                "serverFarmId": "[parameters('hostingPlanID')]",
                "hostingEnvironmentProfile": "[parameters('hostingEnvironmentProfile')]",
                "httpsOnly": "[parameters('httpsEnable')]"
              },
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))]": {}
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[parameters('managedIdentityName')]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceGroup().id, 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))).principalId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[format('appInsights-{0}', format('web-{0}', parameters('hostingPlanName')))]",
              "location": "[parameters('location')]",
              "tags": {
                "[format('hidden-link:{0}', resourceId('Microsoft.Web/sites', format('web-{0}', parameters('hostingPlanName'))))]": "Resource",
                "displayName": "AppInsightsComponent"
              },
              "kind": "web",
              "properties": {
                "Application_Type": "web"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', format('web-{0}', parameters('hostingPlanName')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('app-serviceplan-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('nsg-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[format('storageaccount-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('subscriptionId')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountType": {
            "value": "[parameters('storageAccountType')]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.storageAccountName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "8382868455280631365"
            }
          },
          "parameters": {
            "storageAccountType": {
              "type": "string",
              "allowedValues": [
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_GRS",
                "Standard_GZRS",
                "Standard_LRS",
                "Standard_RAGRS",
                "Standard_RAGZRS",
                "Standard_ZRS"
              ],
              "metadata": {
                "description": "Storage Account type"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources."
              }
            },
            "storageAccountName": {
              "type": "string",
              "defaultValue": "[format('store{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "The name of the Storage Account"
              }
            },
            "advancedThreatProtectionEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable or disable Advanced Threat Protection."
              }
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-04-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('storageAccountType')]"
              },
              "kind": "StorageV2",
              "properties": {}
            },
            {
              "condition": "[parameters('advancedThreatProtectionEnabled')]",
              "type": "Microsoft.Security/advancedThreatProtectionSettings",
              "apiVersion": "2019-01-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "current",
              "properties": {
                "isEnabled": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            }
          ],
          "outputs": {
            "storageAccountName": {
              "type": "string",
              "value": "[parameters('storageAccountName')]"
            },
            "storageAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('usePeering')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[format('hub-peering-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('subscriptionId')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "existingLocalVirtualNetworkName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('vnet-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.name.value]"
          },
          "existingRemoteVirtualNetworkName": {
            "value": "[parameters('existingRemoteVirtualNetworkName')]"
          },
          "existingRemoteVirtualNetworkResourceGroupName": {
            "value": "[parameters('existingRemoteVirtualNetworkResourceGroupName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "17718844949536163305"
            }
          },
          "parameters": {
            "existingLocalVirtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "Set the local VNet name"
              }
            },
            "existingRemoteVirtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "Set the remote VNet name"
              }
            },
            "existingRemoteVirtualNetworkResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "Sets the remote VNet Resource group"
              }
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}/peering-to-remote-vnet', parameters('existingLocalVirtualNetworkName'))]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": false,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                  "id": "[resourceId(parameters('existingRemoteVirtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('existingRemoteVirtualNetworkName'))]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('nsg-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('vnet-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('usePeering')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[format('spoke-peering-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('subscriptionId')]",
      "resourceGroup": "[parameters('existingRemoteVirtualNetworkResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "existingLocalVirtualNetworkName": {
            "value": "[parameters('existingRemoteVirtualNetworkName')]"
          },
          "existingRemoteVirtualNetworkName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('vnet-deployment-{0}', parameters('deploymentNameSuffix'))), '2020-06-01').outputs.name.value]"
          },
          "existingRemoteVirtualNetworkResourceGroupName": {
            "value": "[parameters('resourceGroupName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "17718844949536163305"
            }
          },
          "parameters": {
            "existingLocalVirtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "Set the local VNet name"
              }
            },
            "existingRemoteVirtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "Set the remote VNet name"
              }
            },
            "existingRemoteVirtualNetworkResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "Sets the remote VNet Resource group"
              }
            }
          },
          "functions": [],
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}/peering-to-remote-vnet', parameters('existingLocalVirtualNetworkName'))]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": false,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                  "id": "[resourceId(parameters('existingRemoteVirtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('existingRemoteVirtualNetworkName'))]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('nsg-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('hub-peering-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('vnet-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    }
  ]
}